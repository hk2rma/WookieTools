geom_vline(xintercept = ci, color = "red", linetype = "dashed") +
ggtitle(paste(title, "- Counts"))
# Return combined plot for each seurat object
return(p1 + p2 + plot_layout(ncol = 2))
}
# Create plots for each Seurat object
wookie_fc_hist(test,fi = 2000,ci = 4000)
# Function to create a plot for a given Seurat object
wookie_fc_hist <- function(seurat_obj, title = 'Histogram', fi = 0, ci = 0) {
# Extract data
data <- FetchData(seurat_obj, vars = c("nFeature_RNA", "nCount_RNA"))
# Create histograms using ggplot2
p1 <- ggplot(data, aes(x = nFeature_RNA)) +
geom_histogram(bins = 100, fill = "#06125F") +
geom_vline(xintercept = fi, color = "#FF0909", linetype = "dashed") +
ggtitle(paste(title, "- Features"))
p2 <- ggplot(data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100, fill = "#06125F") +
geom_vline(xintercept = ci, color = "#FF0909", linetype = "dashed") +
ggtitle(paste(title, "- Counts"))
# Return combined plot for each seurat object
return(p1 + p2 + plot_layout(ncol = 2))
}
# Create plots for each Seurat object
wookie_fc_hist(test,fi = 2000,ci = 4000)
devtools::document()
rm(list = c("wookie_featureplot", "wookie_filter_celltype", "wookie_ge_histogram", "wookie_get_pc",
"wookie_matrix_qc", "wookie_matrix_sum", "wookie_Mindist", "wookie_multifeatureumap", "wookie_qc",
"wookie_scrub"))
devtools::document()
rm(list = c("wookie_fc_hist"))
devtools::document()
ls
import(Seurat)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000,nc_min = 0, pmt = 20,
ptr = NULL, species = 'Mouse',
pt.size = NULL,legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
if (!is.null(ptr)) {
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
}
seurat_obj <- subset(seurat_obj, 'nFeature_RNA' > nf_min &
'nFeature_RNA' < nf_max & 'nCount_RNA' < nc_max &
'nCount_RNA' > nc_min & 'percent.mt' < pmt)
if (!is.null(ptr)) {
seurat_obj <- subset(seurat_obj, 'percent.ribo' < ptr_max &
'percent.ribo' > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t <- readRDS('sct_seu_1104.rds')
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000,nc_min = 0, pmt = 20,
ptr_max = NULL,ptr_min = NULL species = 'Mouse',
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
}
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max |
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 100, ptr_min = 10)
library(Seurat)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
}
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max |
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 100, ptr_min = 10)
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20)
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20, pmt = 5)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max |
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20, pmt = 5)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max &
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20, pmt = 10)
t1 <- test_qc(t, pmt = 10)
t1 <- test_qc(t, pmt = 10,pt.size = FALSE)
t1 <- test_qc(t, pmt = 10,ptr_min = 10,pt.size = FALSE)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo > ptr_min)
}
if (!is.null(ptr_max)  {
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo > ptr_min)
}
if (!is.null(ptr_max) ) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, pmt = 10, ptr_min = 10,pt.size = FALSE)
t1 <- test_qc(t, pmt = 10, ptr_max = 50,pt.size = FALSE)
t1 <- test_qc(t, pmt = 10, ptr_min = 10 ,ptr_max = 50,pt.size = FALSE)
devtools::document()
roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
devtools::document()
wookieSay <- function() {
messages <- c(
"May the midichlorians be with you!",
"This data analysis is strong with the Force.",
"Your single-cell journey to the Endor system has begun.",
"You must unlearn what you have learned about normalization.",
"Do. Or do not. There is no try when it comes to dimensionality reduction.",
"I find your lack of quality control disturbing.",
"Great shot, kid! That's one in a million reads!",
"Laugh it up, fuzzball! Your p-value adjustment is impressive.",
"Hokey religions and ancient data analysis tools are no match for a good Seurat workflow.",
"I've got a bad feeling about this cluster.",
"The Force flows through every cell.",
"Sacredible! Your single-cell data is a true Masterwork.",
"Your analysis is an elegant weapon for a more civilized age.",
"You don't know the power of the dark side of batch effects.",
"Your mind powers will have doubled since the last time we met, count.",
"This is the way to handle single-cell data.",
"Search your feelings, you know it to be true... that normalization is necessary.",
"I am one with the Force, and the Force is with me... and your single-cell data.",
"You must learn the ways of the Force if you're to come with me to a higher dimension.",
"Strap yourselves in, we're in for some fancy data integration!"
)
message <- sample(messages, 1)
cat(message, "\n")
}
wookieSay()
wookieSay <- function() {
messages <- c(
"May the midichlorians be with you!",
"This data analysis is strong with the Force.",
"Your single-cell journey to the Endor system has begun.",
"You must unlearn what you have learned about normalization.",
"Do. Or do not. There is no try when it comes to dimensionality reduction.",
"I find your lack of quality control disturbing.",
"Great shot, kid! That's one in a million reads!",
"Laugh it up, fuzzball! Your p-value adjustment is impressive.",
"Hokey religions and ancient data analysis tools are no match for a good Seurat workflow.",
"I've got a bad feeling about this cluster.",
"The Force flows through every cell.",
"Sacredible! Your single-cell data is a true Masterwork.",
"Your analysis is an elegant weapon for a more civilized age.",
"You don't know the power of the dark side of batch effects.",
"Your mind powers will have doubled since the last time we met, count.",
"This is the way to handle single-cell data.",
"Search your feelings, you know it to be true... that normalization is necessary.",
"I am one with the Force, and the Force is with me... and your single-cell data.",
"You must learn the ways of the Force if you're to come with me to a higher dimension.",
"Strap yourselves in, we're in for some fancy data integration!",
"The ability to identify rare cell types is insignificant next to the power of the Force.",
"You will never find a more wretched hive of scum and villainy than batch effects.",
"These aren't the cells you're looking for. *waves hand*",
"Your cells have paid the price for your lack of vision regarding normalization.",
"I am altering the analysis. Pray I don't alter it any further.",
"The circle is now complete. Your analysis has begun.",
"You have controlled your Cell Ranger data. But you have allowed this Seurat... this Seurat to twist your mind.",
"The data is strong with this one.",
"I find your lack of faith in single-cell analysis disturbing.",
"The Force will be with you. Always.",
"I'll never join you in your pursuit of batch effects!",
"You've failed, Your Highness. I am a Jedi, like my father before me. I will not turn to the dark side of poor quality control.",
"The Force is what gives a Jedi their power. It's an energy field created by all living cells that surrounds us, penetrates us, and binds the galaxy together.",
"I've been waiting for you, Obi-Wan. We meet again, at last. The circle is now complete. When I left you, I was but the learner; now I am the master of single-cell analysis.",
"Your focus determines your reality. Focus on the data, not on your fears of misinterpreting it.",
"You must confront your fear of batch effects. Only then will you become a true master of single-cell analysis.",
"The fear of batch effects is the path to the dark side. Fear leads to anger, anger leads to hate, hate leads to suffering... in your data interpretation."
)
message <- sample(messages, 1)
cat(message, "\n")
}
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
test['RNA_snn_res.0.6']
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
