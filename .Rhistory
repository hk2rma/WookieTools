cplot
dub_1 <- DimPlot(fn_seu,group.by = 'scrublet_call')
dub_2 <- FeaturePlot(object = fn_seu, features ='scrublet_score', pt.size = 0.8, reduction = "umap") +
theme(aspect.ratio = 1) + # yellow: #ffd700; red: #ff0000
scale_color_gradientn(colours = c("#DCDCDC","yellow","orange","red","#8b0000"))
doublet_umap <- plot_grid(dub_1,dub_2)
doublet_umap
dub_1 <- DimPlot(fn_seu,group.by = 'scrublet_call')
dub_2 <- FeaturePlot(object = fn_seu, features ='scrublet_score', pt.size = 0.8, reduction = "umap") +
theme(aspect.ratio = 1) + # yellow: #ffd700; red: #ff0000
scale_color_gradientn(colours = c("#DCDCDC","yellow","orange","red","#8b0000"))
doublet_umap <- plot_grid(dub_1,dub_2,ncol = 2,rel_widths = c(1,1),rel_heights = c(1,1))
doublet_umap
dub_1 <- DimPlot(fn_seu,group.by = 'scrublet_call') + theme(aspect.ratio = 1)
dub_2 <- FeaturePlot(object = fn_seu, features ='scrublet_score', pt.size = 0.8, reduction = "umap") +
theme(aspect.ratio = 1) + # yellow: #ffd700; red: #ff0000
scale_color_gradientn(colours = c("#DCDCDC","yellow","orange","red","#8b0000"))
doublet_umap <- plot_grid(dub_1,dub_2,ncol = 2,rel_widths = c(1,1),rel_heights = c(1,1))
doublet_umap
Dimplot(fn_seu)
DimPlot(fn_seu)
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
fn_seu <- readRDS('ma_3k_seu.rds')
DimPlot(fn_seu)
library(loupeR)
create_loupe_from_seurat(fn_seu)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(Seurat))
suppressMessages(library(ClustAssess))
suppressMessages(library(ggplot2))
suppressMessages(library(patchwork))
suppressMessages(library(dplyr))
sct_seu <- readRDS('sct_seu.rds')
n_abundant <- 3000
ma_genes= rownames(sct_seu@assays[['SCT']])[order(Matrix::rowSums(sct_seu@assays[['SCT']]),
decreasing=TRUE)]
var_feat<- VariableFeatures(sct_seu)
n_repetitions = 20
n_cores = 14
steps = seq(from = 1000, to = 3000, by = 250)
common_features_ma <- intersect(ma_genes, rownames(sct_seu@assays$SCT$scale.data))
common_features_vf <- intersect(var_feat, rownames(sct_seu@assays$SCT$scale.data))
pca_feature_stability_object= c(get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_ma,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "MA",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3),
get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_vf,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "HV",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3))
remove.packages('ClustAssess')
install.packages('ClustAssess')
install.packages("ClustAssess")
library(ClustAssess)
package_version(ClustAssess)
package_version('ClustAssess')
package_version('ClustAssess')
packageVersion(ClustAssess)
packageVersion('ClustAssess'#)
packageVersion('ClustAssess')
packageVersion('ClustAssess')
knitr::opts_chunk$set(echo = TRUE)
pca_feature_stability_object= c(get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_ma,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "MA",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3),
get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_vf,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "HV",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3))
suppressMessages(library(Seurat))
suppressMessages(library(ClustAssess))
suppressMessages(library(ggplot2))
suppressMessages(library(patchwork))
suppressMessages(library(dplyr))
pca_feature_stability_object= c(get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_ma,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "MA",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3),
get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_vf,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "HV",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3))
plot_feature_stability_boxplot(pca_feature_stability_object, text_size  = 2.5)
plot_feature_stability_ecs_incremental(pca_feature_stability_object, dodge_width = 1, text_size = 2) +
theme(legend.position = c(1,0),
legend.justification = c(1,0))
plot_feature_stability_mb_facet(pca_feature_stability_object, text_size = 2)
plot_feature_stability_ecs_facet(pca_feature_stability_object,point_size = 0.5)
plot_feature_stability_ecs_facet(pca_feature_stability_object,point_size = 0.3)
plot_feature_stability_ecs_facet(pca_feature_stability_object)
n_repetitions = 20
n_cores = 14
steps = seq(from = 1000, to = 3000, by = 500)
pca_feature_stability_object= c(get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_ma,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "MA",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.3,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3),
get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_vf,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "HV",
graph_reduction_type = "PCA",
npcs = 30,
min_dist = 0.3,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3))
plot_feature_stability_boxplot(pca_feature_stability_object, text_size  = 2.5)
plot_feature_stability_ecs_incremental(pca_feature_stability_object, dodge_width = 1, text_size = 2) +
theme(legend.position = c(1,0),
legend.justification = c(1,0))
plot_feature_stability_ecs_incremental(pca_feature_stability_object, dodge_width = 1, text_size = 2) +
theme(legend.position = c(1,0),
legend.justification = c(1,0))
plot_feature_stability_mb_facet(pca_feature_stability_object, text_size = 2)
plot_feature_stability_ecs_facet(pca_feature_stability_object, text_size = 2)
plot_feature_stability_ecs_facet(pca_feature_stability_object)
pca_feature_stability_object= c(get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_ma,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "MA",
graph_reduction_type = "UMAP",
npcs = 30,
min_dist = 0.3,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3),
get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_vf,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "HV",
graph_reduction_type = "UMAP",
npcs = 30,
min_dist = 0.3,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3))
plot_feature_stability_boxplot(pca_feature_stability_object, text_size  = 2.5)
plot_feature_stability_ecs_incremental(pca_feature_stability_object, dodge_width = 1, text_size = 2) +
theme(legend.position = c(1,0),
legend.justification = c(1,0))
plot_feature_stability_mb_facet(pca_feature_stability_object, text_size = 2)
plot_feature_stability_ecs_facet(pca_feature_stability_object)
gc()
sct_seu <- readRDS('pm_sct_seu.rds')
suppressMessages(library(Seurat))
suppressMessages(library(ClustAssess))
suppressMessages(library(ggplot2))
suppressMessages(library(patchwork))
suppressMessages(library(dplyr))
n_abundant <- 3000
ma_genes= rownames(sct_seu@assays[['SCT']])[order(Matrix::rowSums(sct_seu@assays[['SCT']]),
decreasing=TRUE)]
var_feat<- VariableFeatures(sct_seu)
n_repetitions = 20
n_cores = 14
steps = seq(from = 1000, to = 3000, by = 500)
common_features_ma <- intersect(ma_genes, rownames(sct_seu@assays$SCT$scale.data))
common_features_vf <- intersect(var_feat, rownames(sct_seu@assays$SCT$scale.data))
pca_feature_stability_object= c(get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_ma,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "MA",
graph_reduction_type = "UMAP",
min_dist = 0.3,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3),
get_feature_stability(data_matrix = sct_seu@assays[["SCT"]]$scale.data,
feature_set = common_features_vf,
steps = steps,
n_repetitions = n_repetitions,
feature_type = "HV",
graph_reduction_type = "UMAP",
min_dist = 0.3,
n_neighbors = 30,
metric = "cosine",
ncores = n_cores,
ecs_thresh = 1,
algorithm = 3))
plot_feature_stability_boxplot(pca_feature_stability_object, text_size  = 2.5)
plot_feature_stability_ecs_incremental(pca_feature_stability_object, dodge_width = 1, text_size = 2) +
theme(legend.position = c(1,0),
legend.justification = c(1,0))
plot_feature_stability_mb_facet(pca_feature_stability_object, text_size = 2)
plot_feature_stability_ecs_facet(pca_feature_stability_object)
nn_conn_comps_object = c(get_nn_conn_comps(object = sct_seu@reductions$pca@cell.embeddings,
n_neigh_sequence = c(c(1,2,3,4), seq(from = 5, to = 30, by = 5)),
n_repetitions = n_repetitions,
graph_reduction_type = "UMAP",
ncores = n_cores,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine"),
get_nn_conn_comps(object = sct_seu@assays[["SCT"]]$scale.data,
n_neigh_sequence = c(c(1,2,3,4), seq(from = 5, to = 30, by = 5)),
n_repetitions = n_repetitions,
graph_reduction_type = "PCA",
ncores = n_cores,
nv = 30))
nn_conn_comps_object = c(get_nn_conn_comps(object = sct_seu@reductions$umap@cell.embeddings,
n_neigh_sequence = c(c(1,2,3,4), seq(from = 5, to = 30, by = 5)),
n_repetitions = n_repetitions,
graph_reduction_type = "UMAP",
ncores = n_cores,
min_dist = 0.5,
n_neighbors = 30,
metric = "cosine"),
get_nn_conn_comps(object = sct_seu@assays[["SCT"]]$scale.data,
n_neigh_sequence = c(c(1,2,3,4), seq(from = 5, to = 30, by = 5)),
n_repetitions = n_repetitions,
graph_reduction_type = "PCA",
ncores = n_cores,
nv = 30))
View(sct_seu)
library(WookieTools)
qc
qc()
WookieTools::qc
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(Seurat))
suppressMessages(library(patchwork))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(cowplot))
ncb_pool <- readRDS('ncb_pooled.rds')
ncb_merged <- JoinLayers(ncb_pool)
age_column <- c()
for (index in rownames(ncb_merged@meta.data)){
if (grepl('SIGAA8', index)){
age_column = c(age_column, 'p28')
}else if(grepl('SIGAB8', index)){
age_column = c(age_column, 'p28')
}else if(grepl('SIGAC8', index)){
age_column = c(age_column, 'p28')
}else if(grepl('SIGAC6', index)){
age_column = c(age_column, 'p7')
}else if(grepl('SIGAD7', index)){
age_column = c(age_column, 'p7')
}else if(grepl('SIGAE6', index)){
age_column = c(age_column, 'p7')
}else{
age_column = c(age_column, 'Adult')
}
}
ncb_merged@meta.data$age = age_column
ncb_merged <-NormalizeData(ncb_merged)
saveRDS(ncb_merged,'nm_ncb.rds')
uppressMessages(library(Seurat))
suppressMessages(library(Seurat))
suppressMessages(library(patchwork))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(cowplot))
ncb_merged <- JoinLayers(ncb_pool)
age_column <- c()
for (index in rownames(ncb_merged@meta.data)){
if (grepl('SIGAA8', index)){
age_column = c(age_column, 'p28')
}else if(grepl('SIGAB8', index)){
age_column = c(age_column, 'p28')
}else if(grepl('SIGAC8', index)){
age_column = c(age_column, 'p28')
}else if(grepl('SIGAC6', index)){
age_column = c(age_column, 'p7')
}else if(grepl('SIGAD7', index)){
age_column = c(age_column, 'p7')
}else if(grepl('SIGAE6', index)){
age_column = c(age_column, 'p7')
}else{
age_column = c(age_column, 'Adult')
}
}
ncb_merged@meta.data$age = age_column
seurat_object <- scran::quickCluster(seurat_object)
seurat_object <- ncb_merged
seurat_object <- scran::quickCluster(seurat_object)
load("C:/Users/ha573/Documents/Hari/ncb_paper/fb_id_wspace.RData")
knitr::opts_chunk$set(echo = TRUE)
seurat_object <- DoHeatmap(seurat_object, features = c("Col1a2", "Col1a1", "Fn1", "Pdgfra"), group.by = "cluster")
suppressMessages(library(Matrix))
suppressMessages(library(tidyverse))
suppressMessages(library(patchwork))
suppressMessages(library(Seurat))
suppressMessages(library(ggplot2))
seurat_object <- DoHeatmap(ncb_merged, features = c("Col1a2", "Col1a1", "Fn1", "Pdgfra"), group.by = "cluster")
# Clustering using Louvain community detection
seurat_object <- FindNeighbors(ncb_merged)
seurat_object <- FindClusters(seurat_object)
seurat_object <- DoHeatmap(seurat_object, features = c("Col1a2", "Col1a1", "Fn1", "Pdgfra"), group.by = "cluster")
View(seurat_object)
seurat_object <- DoHeatmap(seurat_object, features = c("Col1a2", "Col1a1", "Fn1", "Pdgfra"), group.by = "seurat_clusters")
DoHeatmap(seurat_object, features = c("Col1a2", "Col1a1", "Fn1", "Pdgfra"), group.by = "seurat_clusters")
# Clustering using Louvain community detection
seurat_object <- FindNeighbors(ncb_merged)
seurat_object <- FindClusters(seurat_object)
hmap <- DoHeatmap(seurat_object, features = c("Col1a2", "Col1a1", "Fn1", "Pdgfra"), group.by = "seurat_clusters")
hmap
suppressMessages(library(Matrix))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(tidyverse))
suppressMessages(library(scds))
suppressMessages(library(SingleCellExperiment))
suppressMessages(library(Seurat))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(cowplot))
suppressMessages(library(patchwork))
suppressMessages(library(singleCellTK))
knitr::opts_chunk$set(echo = TRUE)
source("jedi_tools.R")
library(sctransform)
sa1_1 <- Read10X('slx_22393/SLX-22393_SITTA1')
sa1_2 <- Read10X('slx_22607/SLX-22607_SITTA1')
sf12_1 <- Read10X('slx_22393/SLX-22393_SITTF12')
sf12_2 <- Read10X('slx_22607/SLX-22607_SITTF12')
sg12_1 <- Read10X('slx_22393/SLX-22393_SITTG12')
sg12_2 <- Read10X('slx_22607/SLX-22607_SITTG12')
sh12_1 <- Read10X('slx_22393/SLX-22393_SITTH12')
sh12_2 <- Read10X('slx_22607/SLX-22607_SITTH12')
sa1 <- sum_matrices(sa1_1,sa1_2,sample = 'SITTA1')
sf12 <- sum_matrices(sf12_1,sf12_2,sample = 'SITTF12')
sg12 <- sum_matrices(sg12_1,sg12_2,sample = 'SITTG12')
sh12 <- sum_matrices(sh12_1,sh12_2,sample = 'SITTH12')
sa1_dqc <- as.Seurat(runDropletQC(as.SingleCellExperiment(sa1)))
sa1_dqc <- as.Seurat(runEmptyDrops(as.SingleCellExperiment(sa1)))
View(sa1)
sa1 <- scrub_dub(sa1)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(Seurat))
suppressMessages(library(ggplot2))
suppressMessages(library(sctransform))
source('jedi_tools.R')
ps_merged <- readRDS('sct_seu.rds')
sct_seu<- RunPCA(ps_merged, features = VariableFeatures(ps_merged),verbose=FALSE)
var.features <- VariableFeatures(sct_seu)
vf <- var.features[1:4000]
#hvg_3k_seu <- FindNeighbors(sct_seu,k.param = 30,features = vf)
#hvg_3k_seu <- FindClusters(hvg_3k_seu, resolution = 0.8,algorithm = 3)
hvg_3k_seu <- RunUMAP(hvg_3k_seu, features=vf, min.dist=0.3)
sct_seu<- RunPCA(ps_merged, features = VariableFeatures(ps_merged),verbose=FALSE)
var.features <- VariableFeatures(sct_seu)
vf <- var.features[1:4000]
#hvg_3k_seu <- FindNeighbors(sct_seu,k.param = 30,features = vf)
#hvg_3k_seu <- FindClusters(hvg_3k_seu, resolution = 0.8,algorithm = 3)
hvg_3k_seu <- RunUMAP(sct_seu, features=vf, min.dist=0.3)
DimPlot(hvg_3k_seu)
p1<- FeaturePlot(object = hvg_3k_seu, features ='nCount_RNA', pt.size = 0.8, reduction = "umap") +
theme(aspect.ratio = 1) + # yellow: #ffd700; red: #ff0000
scale_color_gradientn(colours = c("#DCDCDC","yellow","orange","red","#8b0000"))
p2<- FeaturePlot(object = hvg_3k_seu, features = 'nFeature_RNA', pt.size = 0.8, reduction = "umap") +
theme(aspect.ratio = 1) + # yellow: #ffd700; red: #ff0000
scale_color_gradientn(colours = c("#DCDCDC","yellow","orange","red","#8b0000"))
p3<- FeaturePlot(object = hvg_3k_seu, features = 'percent.mt', pt.size = 0.8, reduction = "umap") +
theme(aspect.ratio = 1) + # yellow: #ffd700; red: #ff0000
scale_color_gradientn(colours = c("#DCDCDC","yellow","orange","red","#8b0000"))
p4<- FeaturePlot(object = hvg_3k_seu, features = 'percent.ribo', pt.size = 0.8, reduction = "umap") +
theme(aspect.ratio = 1) + # yellow: #ffd700; red: #ff0000
scale_color_gradientn(colours = c("#DCDCDC","yellow","orange","red","#8b0000"))
qc_umap_plots <- plot_grid(p1,p2,p3,p4, ncol = 2,rel_widths = c(1,1))
qc_umap_plots
library(WookieTools)
multi_f_plots(hvg_3k_seu,'Krt14')
View(hvg_3k_seu)
sct_seu<- RunPCA(ps_merged, npcs = 30,verbose=FALSE)
DimPlot(sct_seu,group.by='orig.ident')
var.features <- VariableFeatures(sct_seu)
vf <- var.features[1:3000]
#hvg_3k_seu <- FindNeighbors(sct_seu,k.param = 30,features = vf)
#hvg_3k_seu <- FindClusters(hvg_3k_seu, resolution = 0.8,algorithm = 3)
hvg_3k_seu <- RunUMAP(sct_seu, features=vf, min.dist=0.3)
DimPlot(hvg_3k_seu)
library(WookieTools)
multi_f_plots(hvg_3k_seu,'Krt14')
setwd("C:/Users/ha573/Documents/Hari/WookieTools")
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::document()
library(oxygenise)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Version 0.3.5
# All input objects are Seurat Objects unless mentioned otherwise
#' @export
load_libraries <- function() {
required_packages_cran <- c("Matrix", "dplyr", "tidyr", "tidyverse", "SingleCellExperiment", "Seurat", "ggplot2", "plyr", "cowplot", "patchwork")
required_packages_bioc <- c("scds")
installed_packages_cran <- rownames(installed.packages())
installed_packages_bioc <- rownames(utils::installed.packages("BiocManager"))
# Install CRAN packages if not installed
for (package in required_packages_cran) {
if (!(package %in% installed_packages_cran)) {
install.packages(package)
}
}
# Install Bioconductor packages if not installed
if (!"BiocManager" %in% installed_packages_cran) {
install.packages("BiocManager")
}
library(BiocManager)
for (package in required_packages_bioc) {
if (!(package %in% installed_packages_bioc)) {
BiocManager::install(package)
}
}
# Load all required packages
invisible(lapply(c(required_packages_cran, required_packages_bioc), library, character.only = TRUE))
}
load_libraries()
devtools::document()
rm(list = c("load_libraries"))
devtools::document()
library(Seurat)
devtools::document()
library(roxygen2)
roxygenise()
roxygenise()
BiocManager::install('scds',force = TRUE)
roxygenise()
devtools::document()
devtools::document()
roxygen2::roxygenise()
devtools::test()
devtools::test()
use_test('t1')
usethis::use_test('t1')
roxygen2::roxygenise()
devtools::document()
