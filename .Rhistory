install.packages('roxygen2')
library(roxygen2)
#' Function to plot multiple features with colour map
#' Input seurat object and a list of features to plot
#' @export
multi_feature_plots <- function(seuratObject, featureList, ncol = 3, pt.size = 0.8) {
plotList <- lapply(featureList, function(feature) {
FeaturePlot(object = seuratObject, features = feature, pt.size = pt.size, reduction = "umap") +
theme(aspect.ratio = 1) +
scale_color_gradientn(colours = c("#DCDCDC", "yellow", "orange", "red", "#8b0000"))
})
plotGrid <- plot_grid(plotlist = plotList, ncol = ncol, rel_widths = rep(1, length(featureList)))
return(plotGrid)
}
library(devtools)
roxygenise();
roxygenise();
load_all('.')
getwd()
devtools::document()
load_all('.')
load_all('.')
return(plotGrid)
plotList <- lapply(featureList, function(feature) {
FeaturePlot(object = seuratObject, features = feature, pt.size = pt.size, reduction = "umap") +
theme(aspect.ratio = 1) +
scale_color_gradientn(colours = c("#DCDCDC", "yellow", "orange", "red", "#8b0000"))
})
# Function to plot multiple features with color map
# Input seurat object and a list of features to plot
# @export
#' @name multi_f_plots
multi_f_plots <- function(seuratObject, featureList, ncol = 3, pt.size = 0.8) {
plotList <- lapply(featureList, function(feature) {
FeaturePlot(object = seuratObject, features = feature, pt.size = pt.size, reduction = "umap") +
theme(aspect.ratio = 1) +
scale_color_gradientn(colours = c("#DCDCDC", "yellow", "orange", "red", "#8b0000"))
})
plotGrid <- plot_grid(plotlist = plotList, ncol = ncol, rel_widths = rep(1, length(featureList)))
return(plotGrid)
}
load_all('.')
roxygenise();
roxygenise();
roxygenise();
roxygenise();
load_all('.')
git init
git init
git status
roxygenise();
library(roxygen2)
roxygenise();
roxygenise();
roxygenise();
library(devtools)
load_all('.')
library(devtools)
devtools::install_github("hk2rma/WookieTools")
library(WookieTools)
?qc()
help(WookieTools)
help('WookieTools')
??WookieTools
devtools::document()
library(roxygen2)
roxygenise();
roxygenise();
devtools::document()
devtools::build_vignettes()
vignette('inst/doc/wt_doc.Rmd')
library(devtools)
load_all('.')
library(WookieTools)
package.version('WookieTools')
vignette('inst/doc/wt_doc.Rmd')
vignette('./inst/doc/wt_doc.Rmd')
getwd()
vignette('inst/doc/wt_doc.Rmd')
devtools::document()
devtools::build_vignettes()
vignette('wt_doc')
vignette('wt_doc.Rmd')
vignette('inst/doc/wt_doc.Rmd')
vignette('vignettes/wt_doc.Rmd')
vignette("vignettes/wt_doc.Rmd")
suppressMessages(library(ggplot2))
qc <- function(matrix, nf_min = nf_min, nf_max = nf_max, nc = nc, pmt = pmt, group = 'orig.ident', colors = NULL) {
matrix[['percent.ribo']] <- PercentageFeatureSet(matrix, pattern = "^Rp[sl]")
matrix[["percent.mt"]] <- PercentageFeatureSet(matrix, pattern = "^mt-")
matrix <- subset(matrix, subset = nf_min < nFeature_RNA & nFeature_RNA < nf_max & nCount_RNA < nc & percent.mt < pmt)
options(repr.plot.width = 16, repr.plot.height = 30)
vl_plot <- VlnPlot(matrix, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"),
ncol = 4)
options(repr.plot.width = 16, repr.plot.height = 35)
g <- FeatureScatter(matrix,
feature1 = "nCount_RNA",
feature2 = "nFeature_RNA",
group.by = group, shape = 1) + ggtitle('nCount_vs_nFeature') +
geom_point(shape = 1, alpha = 0.3)
plot2 <- FeatureScatter(matrix,
feature1 = "percent.mt",
feature2 = "nFeature_RNA") + ggtitle('percent.mt_vs_nFeature') +
geom_point(shape = 1, alpha = 0.3) + facet_wrap(~colors)
plot3 <- FeatureScatter(matrix,
feature1 = "percent.ribo",
feature2 = "nFeature_RNA") + ggtitle('percent.ribo_vs_nFeature') +
geom_point(shape = 1, alpha = 0.3) + facet_wrap(~colors)
plot4 <- FeatureScatter(matrix,
feature1 = "percent.mt",
feature2 = "percent.ribo") + ggtitle('percent.mt_vs_percent.ribo') +
geom_point(shape = 1, alpha = 0.3) + facet_wrap(~colors)
# Combine all plots into a single plot
c_plot<- plot_grid(g, plot2, plot3, plot4, ncol = 2,label_size = 10)
combined_plot<-  plot_grid(vl_plot,c_plot,ncol = 1,nrow = 2,rel_widths = c(2,1))
# Display the combined plot
print(combined_plot)
return(matrix)
}
qc()
# Version 0.1.1
# All input objects are Seurat Objects unless mentioned otherwise
# @export
load_libraries(){
load_libraries()
#' @description Run Iteratively for the necessary QC...
#' @param matrix Seurat object ...
#' @param nf_min Minimum number of features ...
#' @param nf_max Maximum number of features ...
#' @param nc Maximum number of counts ...
#' @param pmt Percentage of mitochondrial genes ...
#' @param group Grouping variable ...
#' @param colors Colors for facetting ...
#' @return Seurat object after quality control
#' @export
wookie_qc <- function(matrix, nf_min = nf_min, nf_max = nf_max, nc = nc, pmt = pmt, group = 'orig.ident', colors = NULL) {
matrix[['percent.ribo']] <- PercentageFeatureSet(matrix, pattern = "^Rp[sl]")
matrix[["percent.mt"]] <- PercentageFeatureSet(matrix, pattern = "^mt-")
matrix <- subset(matrix, subset = nf_min < nFeature_RNA & nFeature_RNA < nf_max & nCount_RNA < nc & percent.mt < pmt)
options(repr.plot.width = 16, repr.plot.height = 30)
vl_plot <- VlnPlot(matrix, features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.ribo"),
ncol = 4)
options(repr.plot.width = 16, repr.plot.height = 35)
g <- FeatureScatter(matrix,
feature1 = "nCount_RNA",
feature2 = "nFeature_RNA",
group.by = group, shape = 1) + ggtitle('nCount_vs_nFeature') +
geom_point(shape = 1, alpha = 0.3)
plot2 <- FeatureScatter(matrix,
feature1 = "percent.mt",
feature2 = "nFeature_RNA") + ggtitle('percent.mt_vs_nFeature') +
geom_point(shape = 1, alpha = 0.3) + facet_wrap(~colors)
plot3 <- FeatureScatter(matrix,
feature1 = "percent.ribo",
feature2 = "nFeature_RNA") + ggtitle('percent.ribo_vs_nFeature') +
geom_point(shape = 1, alpha = 0.3) + facet_wrap(~colors)
plot4 <- FeatureScatter(matrix,
feature1 = "percent.mt",
feature2 = "percent.ribo") + ggtitle('percent.mt_vs_percent.ribo') +
geom_point(shape = 1, alpha = 0.3) + facet_wrap(~colors)
# Combine all plots into a single plot
c_plot<- plot_grid(g, plot2, plot3, plot4, ncol = 2,label_size = 10)
combined_plot<-  plot_grid(vl_plot,c_plot,ncol = 1,nrow = 2,rel_widths = c(2,1))
# Display the combined plot
print(combined_plot)
return(matrix)
}
load_libraries<- function(){
suppressMessages(library(Matrix))
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(tidyverse))
suppressMessages(library(scds))
suppressMessages(library(SingleCellExperiment))
suppressMessages(library(Seurat))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(cowplot))
suppressMessages(library(patchwork))
suppressMessages(library(singleCellTK))
}
load_libraries()
roxygenise();
roxygenise();
roxygenise();
rm(list=c('wookie_qc'))
roxygenise();
roxygenise();
devtools::document()
