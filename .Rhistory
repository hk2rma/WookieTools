# Load your custom functions
source("R/WookieTools.R")
test_mat <- Read10X('test_files/sitta1/filtered_feature_bc_matrix/')
test <- CreateSeuratObject(test_mat,min.cells = 3, min.features = 300, project = 'test')
test_umap <- readRDS('test_files/Fil_1704.rds')
test_umap <- JoinLayers(test_umap)
expected_number_of_cells = 3750
# Write test cases using testthat's expect_ functions
test_that("wookieqc filters cells based on specified criteria", {
# Perform quality control
filtered_obj <- wookie_qc(test, nf_min = 1000, nf_max = 9000, nc_max = 80000, pmt = 10, ptr = 50)
# Check if the filtered object has the expected number of cells
expect_equal(ncol(filtered_obj), expected_number_of_cells)
# Add more test cases as needed
})
# Define a test for wookie_scrub
#test_that("wookie_scrub correctly processes a Seurat object", {
#
#  scrubbed_obj <- wookie_scrub(test,preprocess = TRUE)
#
#  # Check if the scrubbed object contains scrublet_score and scrublet_call columns
#  expect_true("scrublet_score" %in% colnames(scrubbed_obj@meta.data))
#  expect_true("scrublet_call" %in% colnames(scrubbed_obj@meta.data))
#
#})
# Define a test for wookie_multifeatureumap
test_that("wookie_multifeatureumap correctly plots UMAPs for different features", {
# Run wookie_multifeatureumap on the mock Seurat object
combined_plot <- wookie_multifeatureumap(test_umap,features = VariableFeatures(test_umap),
min.dist = 0.3,max_features = 1000,step = 500)
# Check if the combined plot object is not NULL
expect_true(!is.null(combined_plot))
})
# Define a test for wookie_Mindist
test_that("wookie_Mindist correctly plots UMAPs for various min.dist values", {
# Run wookie_Mindist on the mock Seurat object
combined_plot <- wookie_Mindist(test_umap,dims = 1:20)
# Check if the combined plot object is not NULL
expect_true(!is.null(combined_plot))
# Add more test cases as needed
})
test_that('Wookie_get_pc is working', {
pc <- wookie_get_pc(test_umap)
expect_true(!is.null(pc))
})
# Run the tests
test_results <- test_file("R/test_functions.R")
# Print the test results
print(test_results)
# Create plots for each Seurat object
plot_sa1 <- wookie_fc_hist(test, "test",xi = 2500, yi = 0)
# Function to create a plot for a given Seurat object
wookie_fc_hist <- function(seurat_obj, title = 'Feature/Counts Histogram', fi = 0, ci = 0) {
# Extract data
data <- FetchData(seurat_obj, vars = c("nFeature_RNA", "nCount_RNA"))
# Create histograms using ggplot2
p1 <- ggplot(data, aes(x = nFeature_RNA)) +
geom_histogram(bins = 100, fill = "steelblue") +
geom_vline(xintercept = fi, color = "red", linetype = "dashed") +
ggtitle(paste(title, "- Features"))
p2 <- ggplot(data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100, fill = "steelblue") +
geom_vline(xintercept = ci, color = "red", linetype = "dashed") +
ggtitle(paste(title, "- Counts"))
# Return combined plot for each seurat object
return(p1 + p2 + plot_layout(ncol = 2))
}
# Create plots for each Seurat object
plot_sa1 <- wookie_fc_hist(test, "test",xi = 2500, yi = 0)
# Create plots for each Seurat object
plot_sa1 <- wookie_fc_hist(test, "test")
plot_sa1
# Create plots for each Seurat object
wookie_fc_hist(test, "test",fi = 200,ci = 400)
# Create plots for each Seurat object
wookie_fc_hist(test, "test",fi = 2000,ci = 4000)
# Create plots for each Seurat object
wookie_fc_hist(test,title =  "test",fi = 2000,ci = 4000)
# Create plots for each Seurat object
wookie_fc_hist(test,title =  "meh",fi = 2000,ci = 4000)
# Create plots for each Seurat object
wookie_fc_hist(test,fi = 2000,ci = 4000)
# Function to create a plot for a given Seurat object
wookie_fc_hist <- function(seurat_obj, title = 'Histogram', fi = 0, ci = 0) {
# Extract data
data <- FetchData(seurat_obj, vars = c("nFeature_RNA", "nCount_RNA"))
# Create histograms using ggplot2
p1 <- ggplot(data, aes(x = nFeature_RNA)) +
geom_histogram(bins = 100, fill = "steelblue") +
geom_vline(xintercept = fi, color = "red", linetype = "dashed") +
ggtitle(paste(title, "- Features"))
p2 <- ggplot(data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100, fill = "steelblue") +
geom_vline(xintercept = ci, color = "red", linetype = "dashed") +
ggtitle(paste(title, "- Counts"))
# Return combined plot for each seurat object
return(p1 + p2 + plot_layout(ncol = 2))
}
# Create plots for each Seurat object
wookie_fc_hist(test,fi = 2000,ci = 4000)
# Function to create a plot for a given Seurat object
wookie_fc_hist <- function(seurat_obj, title = 'Histogram', fi = 0, ci = 0) {
# Extract data
data <- FetchData(seurat_obj, vars = c("nFeature_RNA", "nCount_RNA"))
# Create histograms using ggplot2
p1 <- ggplot(data, aes(x = nFeature_RNA)) +
geom_histogram(bins = 100, fill = "#06125F") +
geom_vline(xintercept = fi, color = "#FF0909", linetype = "dashed") +
ggtitle(paste(title, "- Features"))
p2 <- ggplot(data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100, fill = "#06125F") +
geom_vline(xintercept = ci, color = "#FF0909", linetype = "dashed") +
ggtitle(paste(title, "- Counts"))
# Return combined plot for each seurat object
return(p1 + p2 + plot_layout(ncol = 2))
}
# Create plots for each Seurat object
wookie_fc_hist(test,fi = 2000,ci = 4000)
devtools::document()
rm(list = c("wookie_featureplot", "wookie_filter_celltype", "wookie_ge_histogram", "wookie_get_pc",
"wookie_matrix_qc", "wookie_matrix_sum", "wookie_Mindist", "wookie_multifeatureumap", "wookie_qc",
"wookie_scrub"))
devtools::document()
rm(list = c("wookie_fc_hist"))
devtools::document()
ls
import(Seurat)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000,nc_min = 0, pmt = 20,
ptr = NULL, species = 'Mouse',
pt.size = NULL,legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
if (!is.null(ptr)) {
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
}
seurat_obj <- subset(seurat_obj, 'nFeature_RNA' > nf_min &
'nFeature_RNA' < nf_max & 'nCount_RNA' < nc_max &
'nCount_RNA' > nc_min & 'percent.mt' < pmt)
if (!is.null(ptr)) {
seurat_obj <- subset(seurat_obj, 'percent.ribo' < ptr_max &
'percent.ribo' > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t <- readRDS('sct_seu_1104.rds')
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000,nc_min = 0, pmt = 20,
ptr_max = NULL,ptr_min = NULL species = 'Mouse',
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
}
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max |
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 100, ptr_min = 10)
library(Seurat)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
}
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max |
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 100, ptr_min = 10)
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20)
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20, pmt = 5)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max |
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20, pmt = 5)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max &
percent.ribo > ptr_min)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, ptr_max = 40, ptr_min = 20, pmt = 10)
t1 <- test_qc(t, pmt = 10)
t1 <- test_qc(t, pmt = 10,pt.size = FALSE)
t1 <- test_qc(t, pmt = 10,ptr_min = 10,pt.size = FALSE)
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo > ptr_min)
}
if (!is.null(ptr_max)  {
test_qc <- function(seurat_obj, nf_min = 0, nf_max = 20000,
nc_max = 200000, nc_min = 0, pmt = 20,
ptr_max = NULL, ptr_min = NULL, species = 'Mouse',
pt.size = NULL, legend = TRUE) {
if (!inherits(seurat_obj, "Seurat")) {
stop("Input must be a Seurat object.")
}
mt_pattern <- if (species == 'Mouse') "^mt-" else "^MT-"
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = mt_pattern)
seurat_obj[['percent.ribo']] <- PercentageFeatureSet(seurat_obj, pattern = "^Rp[sl]")
seurat_obj <- subset(seurat_obj, nFeature_RNA > nf_min &
nFeature_RNA < nf_max & nCount_RNA < nc_max &
nCount_RNA > nc_min & percent.mt < pmt)
if (!is.null(ptr_min)) {
seurat_obj <- subset(seurat_obj, percent.ribo > ptr_min)
}
if (!is.null(ptr_max) ) {
seurat_obj <- subset(seurat_obj, percent.ribo < ptr_max)
}
if (ncol(seurat_obj) == 0) {
stop("No cells meet the quality control criteria.")
}
# Visualizations
vl_plot <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt",
if (!is.null(ptr_max) || !is.null(ptr_min)) "percent.ribo"),
ncol = 4, pt.size = pt.size)
plot1 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "nCount_RNA",
feature2 = "nFeature_RNA") + NoLegend()
}
plot2 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA")
} else {
FeatureScatter(seurat_obj, feature1 = "percent.mt",
feature2 = "nFeature_RNA") + NoLegend()
}
plots_list <- list(vl_plot, plot1, plot2)
if (!is.null(ptr_max) || !is.null(ptr_min)) {
plot3 <- if (legend) {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA')
}        else {
FeatureScatter(seurat_obj, feature1 = 'percent.ribo',
feature2 = 'nFeature_RNA') + NoLegend()
}
plots_list <- c(plots_list, list(plot3))
}
# Combine all plots into a single plot
combined_plot <- cowplot::plot_grid(plotlist = plots_list,
ncol = 2, align = 'v')
# Display the combined plot
print(combined_plot)
return(seurat_obj)
}
t1 <- test_qc(t, pmt = 10, ptr_min = 10,pt.size = FALSE)
t1 <- test_qc(t, pmt = 10, ptr_max = 50,pt.size = FALSE)
t1 <- test_qc(t, pmt = 10, ptr_min = 10 ,ptr_max = 50,pt.size = FALSE)
devtools::document()
